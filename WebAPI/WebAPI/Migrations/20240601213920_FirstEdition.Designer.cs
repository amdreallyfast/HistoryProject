// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(HistoryProjectDbContext))]
    [Migration("20240601213920_FirstEdition")]
    partial class FirstEdition
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventTag");
                });

            modelBuilder.Entity("WebAPI.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LBDay")
                        .HasColumnType("int");

                    b.Property<int?>("LBHour")
                        .HasColumnType("int");

                    b.Property<int?>("LBMin")
                        .HasColumnType("int");

                    b.Property<int?>("LBMonth")
                        .HasColumnType("int");

                    b.Property<int>("LBYear")
                        .HasColumnType("int");

                    b.Property<int>("Revision")
                        .HasColumnType("int");

                    b.Property<string>("RevisionAuthor")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("RevisionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SpecificLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("UBDay")
                        .HasColumnType("int");

                    b.Property<int?>("UBHour")
                        .HasColumnType("int");

                    b.Property<int?>("UBMin")
                        .HasColumnType("int");

                    b.Property<int?>("UBMonth")
                        .HasColumnType("int");

                    b.Property<int>("UBYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventImageId");

                    b.HasIndex("SpecificLocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WebAPI.Models.EventImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageBinary")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMD5Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebAPI.Models.EventLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WebAPI.Models.EventSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("PublicationLBDay")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationLBMonth")
                        .HasColumnType("int");

                    b.Property<int>("PublicationLBYear")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationUBDay")
                        .HasColumnType("int");

                    b.Property<int?>("PublicationUBMonth")
                        .HasColumnType("int");

                    b.Property<int>("PublicationUBYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Where")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("WebAPI.Models.EventSourceAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EventSourceId");

                    b.ToTable("SourceAuthors");
                });

            modelBuilder.Entity("WebAPI.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("WebAPI.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Models.Event", b =>
                {
                    b.HasOne("WebAPI.Models.EventImage", "EventImage")
                        .WithMany()
                        .HasForeignKey("EventImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.EventLocation", "SpecificLocation")
                        .WithMany()
                        .HasForeignKey("SpecificLocationId");

                    b.Navigation("EventImage");

                    b.Navigation("SpecificLocation");
                });

            modelBuilder.Entity("WebAPI.Models.EventLocation", b =>
                {
                    b.HasOne("WebAPI.Models.Event", null)
                        .WithMany("Region")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebAPI.Models.EventSource", b =>
                {
                    b.HasOne("WebAPI.Models.Event", null)
                        .WithMany("Sources")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("WebAPI.Models.EventSourceAuthor", b =>
                {
                    b.HasOne("WebAPI.Models.EventSource", null)
                        .WithMany("Authors")
                        .HasForeignKey("EventSourceId");
                });

            modelBuilder.Entity("WebAPI.Models.Event", b =>
                {
                    b.Navigation("Region");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WebAPI.Models.EventSource", b =>
                {
                    b.Navigation("Authors");
                });
#pragma warning restore 612, 618
        }
    }
}
