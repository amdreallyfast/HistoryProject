Prerequisite software:
	SQL Server Management Studio (for connecting with my Azure SQL database)
		Alternate: Azure Data Studio
	Node.js (for creating and compiling React.js projects)
		npm install --save react-router-dom
		npm install --save react-bootstrap
	Bootstrap (for styling)
		https://getbootstrap.com/docs/5.2/getting-started/introduction/
	Python 3 (??for what? was this for my java experiments??)
	Visual Studio (for editing ASP.NET Core 6 code)
	Visual Studio Code (for working with javascript)
	SQL Server Management Studio
	SQL Server Express

VS Code settings:
	Extension:
		JavaScript and TypeScript Nightly (by Microsoft)
	File -> Preferences -> Settings
		Detect Indentation:	off
	Ctrl-Shift-P
		Default settings json
			??set default formatter??

How to Install Java JDK on Windows 11 ( with JAVA_HOME )
https://www.youtube.com/watch?v=VTzzmqNwGzM
Note: Creation of the "New Folder" folder.

How to Set Up Java Development in Visual Studio Code on Windows 11 | VSCode Java Development Basics
https://www.youtube.com/watch?v=AvOIyjBY_mk

Build a Simple Web Server with Java
https://www.youtube.com/watch?v=FqufxoA4m70
Note: Creation of the BasicWebServer folder.
Also Note: Access in browser with 
    https://localhost:8080/

How to run a web server using Java in 2022
https://www.youtube.com/watch?v=Gel8Q_MO3rI
Note: Learned this command:
    java -m jdk.httpserver -b 0.0.0.0 -p 8080
    This will create a basic HTTP server (with HTTPS support, should you select that port).
    Does not support "jsp" (Java Server Pages). If you specify such a file in the browser address bar, the file is simply downloaded.

    ?? is this useful to me??

Tutorial:
	React JS + .NET Core Web API + Microsoft SQL | full stack app tutorial
	https://www.youtube.com/watch?v=ON-Z1iD6Y-c

	Not covered, but need to create a SQL server resource first.
		
	Explaining how Program.cs is different in .NET Core 6 compared to .NET Core 5:
		.NET 6 Startup Changes - Handling Program.cs Without Startup.cs
		https://www.youtube.com/watch?v=vdhFw1VSowg
	
	Crash course in Entity Framework in .NET Core 6 (no different than in prior versions that I could tell):
		.NET 6 & EF Core ðŸš€ ALL Relationships (1:1, 1:n, n:n) with Entity Framework Core 6 & SQL Server
		https://www.youtube.com/watch?v=FHx6AGVF_IE
	
	How to upload a single file in ASP.NET Core with the Swagger web GUI (use IFormeFile)
		https://codeburst.io/file-upload-via-swagger-e6c21b54d036

	NPX command (run in PowerShell 7):
		npx create-react-app my-app
		Note: Prompted to install the "create-react-app" package (I said "y").
		
	Fixed error: "export 'Switch' (imported as 'Switch') was not found in 'react-router-dom'"
		Syntax update in react-router-dom V6: do not use "Switch", but use "Routes" instead.
		https://www.moreonfew.com/attempted-import-error-switch-is-not-exported-from-react-router-dom/
	
	Fixed error: <Route path="..." component={MyComponent}/> is invalid.
		Syntax update in react-router-dom V6: do not use "component", but use "element={<MyComponent />}" instead.
		https://stackoverflow.com/questions/69854011/matched-leaf-route-at-location-does-not-have-an-element

	Run UI on its own:
		Command line:
			cd <repo root>/UI/my-app
			npm start
		Browser:
			http://localhost:3000/home
			Note: WebAPI _must_ be running in order for the WebAPI requests that are associated with a database to work.

Setup summary:
	Authorization flow:
		VS ASP.NET Core program retrieves locally installed cert from cert store.
		Program uses that cert + tenantId + appId to reach out to the AAD in my personal tenant and attempt to identify itself as the app via the cert.
		AAD responds with authorization (or "Issuer failed" if I set it up wrong).
		Program attempts to access the secret for the DB connection string in the key vault by (back end in Azure) using the identity of the app from earlier.
		Azure responds with the Azure KeyVaultSecret (or "Authorization failed" if the app was not given secret "get" access to the key vault).

	Source(s):
		How to securely store and load secrets using Azure Key Vault in .NET Core (using a certificate)
		https://www.youtube.com/watch?v=b21EQvfjvHc
		
		People at work: 
			Michael Crewe, Josh Baugher, Larry Wilcher, Brian McMullen, (partially) John 

	Database:
		SQL Server:
			Create on your own machine:
				Note: I created the SQL server on an old PC, but connected to it from my newer PC dev box.
				
				Install SQL Server Management Studio (SSMS)
				Install SQL Server Express
					Default options
					Creates server "SQLEXPRESS"
					Note: Also installs "Sql Server Configuration Manager", which is separate and does different things than SSMS.

				Windows Firewall:
					CANCEL.
					Apparently not necessary. Just set up Sql Server Configuration Manager to allow the right porst.
					
					New inbound rule:
						Allow_SQL_TCP_1433
						Allow_SQL_TCP_62229

				Note: Notes below based on user interfaces for SSMS 20.1 and SQL Server Express 2022.
				
				Sql Server Configuration Manager:
					SQL Server Network Configuration
						Protocols for <sqlServerName>
							TCP/IP
								If disabled -> right-click -> Enable
								Wait until finished
							
							TCP/IP -> right-click -> Properties -> tab: "IP Addresses"
								Scroll down to the bottom
								IPAll:
									TCP Port:
										Should be blank at this point.
										Add:
											1433
										button: "OK"
								
					SQL Server Services
						SQL Server (<sqlServerName>)
							??necessary??
							right-click -> Properties -> tab: "FILESTREAM"
								check: "Enable FILESTREAM for Transact-SQL access
								check: "Enable FILESTREAM for I/O access
								Windows share name: <default>

							If stopped:
								right-click -> Start -> wait

							If running:
								right-click -> Restart -> wait

				SQL Server Management Studio:
					1. Connect -> Database Engine
						Server Name: 
							<drop-down> -> <Browse for more ...> -> tab: "Local Servers" -> Database Engine -> <select>
							Note: Should be only the one database unless you've installed SQL server before and selected a different database name this time.
						Authentication: 
							Windows Authentication
						Encryption:
							Mandatory
							check: "Trust server certificate"
							Note: Cert is locally signed by this computer that you just installed it on, so unless you don't trust the computer that you just installed SQL Server on, trust the cert.
							Note: Failure to trust cert results in error:
								"A connection was successfully established with the server, but then an error occurred during the login process. (provider: SSL Provider, error: 0 - There certificate chain was issued by an authority that is not trusted.)"
								
								"Should SSMS added the 'Trust Server Certificate' setting to the connection to unblock the connection?"
									button: "Yes"
					
					2. <sqlServer> -> Security -> Logins -> right-click -> New Login
						tab: "General"
							Login name		test
							Login type		SQL Server Authentication
							Password		TestTest
							Confirm Pass..	<copyPaste>
							check: 			"Enforce password policy"
							check: 			"Enforce password expiration"
							un_check: 		"User must change password at next login"
								Note: Not necessary right now. We are making a non-default account for ourselves and setting the password now.
						
						tab: "Server Roles"
							check: "serveradmin"
						tab: "User Mapping"
							Users mapped to this login:
								Check all
							Database role membership for: master
								Check all
						tab: "Securables"
							button: "Search" -> select: "The server '<sqlServerName>'
						tab: "Status"
							Permission to connecto to database engine:
								Grant
							Login:
								Enabled
					
					3. <sqlServer> -> right-click -> Properties -> Security -> Server authentication: "SQL Server and Windows Authentication mode"
						Seriously, you have to do this.
						Otherwise, possible error:
							Error: Microsoft ODBC Seicwe `7 for SQL Server : Login failed for user 'test'
						
						Check SQL Server logs:
							<sqlServer> -> Management -> SQL Server Logs
								Double-click "Current"
								Button: "Search"
									Search: "login"
									Ex:
										Login failed for user 'test'. Reason: An attempt to login using SQL authentication failed. Server is configured for integrated authentication onlye. [CLIENT 127.0.0.1]
										Login failed for user 'test'. Reason: An attempt to login using SQL authentication failed. Server is configured for integrated authentication onlye. [CLIENT 192.168.1.117]
					
					4. Create database:
						SQL Server Management Studio -> Databases -> right-click -> New Database
							tab: "General"
								Database name: 	HistoryProjectOfflineDb
							
						//	??necessary??
						//		tab: "Files" -> section: "Database files"
						//			column: "Filename":
						//				Name files (not strictly necessary, but just doing some files.
						//				HistoryProjectOfflineDb.mdf
						//				HistoryProjectOfflineLogs.ldf
						//
						//	button: "OK"
						//
						//Modify to allow FILESTREAM filegroups:
						//	// Source:
						//	//	https://stackoverflow.com/questions/21093255/filestream-feature-is-disabled
						//	SQL Server Management Studio -> Databases -> HistoryProjectOfflineDb -> right-click -> New Query
						//		sp_configure 'filestream access level', 2
						//		reconfigure with override
						//		
						//		button: "Execute"
						//		
						//		Output:
						//			Configuration option 'filestream access level' changed from 0 to 2. Run the RECONFIGURE statement to install.
						//			
						//			Completion time: <timestamp>
						//
						//Add FILESTREAM filegroup:
						//	SQL Server Management Studio -> Databases -> right-click -> Properties
						//		tab: "Filegroups" -> section: "FILESTREAM" -> button: "Add"
						//			Name:		IMAGES
						//			Default:	Checked	(that is, default destination for filestream files ??verify??)
						//			All others default
						//		
						//		tab: "Files" -> section: "Database files"
						//			button: "Add"
						//				Logical Name:			ImagesDb
						//				File Type:				FILESTREAM
						//				Filegroup:				IMAGES (create just a moment ago)
						//				Initial Size (MB)		<default>
						//				Autogrowth / Maxsize:	<default>
						//				Path:					<default>
						//				File Name:				<default>
						//			
						//			??necessary??
						//				column: "Filename"
						//					Name all files.
						//					HistoryProjectOfflineDb.mdf
						//					HistoryProjectOfflineLogs.ldf
						//					HistoryProjectOfflineImages.ndf	// "ndf" == "Not master Database File"
						//		
						//		button: "OK"
						//		
						//		Error:
						//			Could not process the operation. Always On Availability Groups replica manager is disabled on this instance of SQL Server. Enable Always On Availability Groups, by using the SQL Server Configuration Manager. Then, restart the SQL Server service, and retry the current operation.
						//			
						//			SQL Server Configuration Manager -> SQL Server Services -> SQL Server (SQLEXPRESS) -> right-click -> Properties -> tab: "Always On Availability Groups"
						//				"Always On Availability Groups is unavailable in this edition of SQL Server or Windows."
						//				
						//				Well. Crap. Guess it's just a regular database with varbinary(max).
					
					5. Give sql server admin permission to alter the database
						SQL Server Management Studio -> Databases -> HistoryProjectOfflineDb -> Security -> Users -> test -> right-click -> Properties -> tab: "Membership" -> check "db_owner"
					
					6. Restart sql server:
						<sqlServer> -> right-click -> Restart -> wait

				Test:
					Diagnosis:
						PowerShell:
							tnc <ipAddress> -p <port>
							
							Note: For this command to work, a program must be listening at the destination. This will not test if you can login to the SQL server, but it may be useful in determining if you can actually hit the SQL server program even if you can't login.
					
					On PC where database is installed:
						PowerShell (any):
							sqlcmd -S 127.0.0.1 -U test -P TestTest
							Prompt:
								select @@version
								go
								
								Should print out the version of SQL server.
					
					On another PC that has SSMS installed:
						PowerShell (any):
							sqlcmd -S 192.168.1.101 -U test -P TestTest
							Prompt:
								select @@version
								go
								
								Should print same version.

				Database:
					Create:
						Direct SQL:
							Source:
								https://learn.microsoft.com/en-us/sql/relational-databases/blob/create-a-filestream-enabled-database?view=sql-server-ver15
						
						Tools:
							SQL Server Management Studio -> Databases -> right-click -> New Database
								tab: "General"
									Database name: 	HistoryProjectOfflineDb
								
								??necessary??
									tab: "Files" -> section: "Database files"
										column: "Filename":
											Name files (not strictly necessary, but just doing some files.
											HistoryProjectOfflineDb.mdf
											HistoryProjectOfflineLogs.ldf

								button: "OK"
							
							Modify to allow FILESTREAM filegroups:
								// Source:
								//	https://stackoverflow.com/questions/21093255/filestream-feature-is-disabled
								SQL Server Management Studio -> Databases -> HistoryProjectOfflineDb -> right-click -> New Query
									sp_configure 'filestream access level', 2
									reconfigure with override
									
									button: "Execute"
									
									Output:
										Configuration option 'filestream access level' changed from 0 to 2. Run the RECONFIGURE statement to install.
										
										Completion time: <timestamp>
							
							Add FILESTREAM filegroup:
								SQL Server Management Studio -> Databases -> right-click -> Properties
									tab: "Filegroups" -> section: "FILESTREAM" -> button: "Add"
										Name:		IMAGES
										Default:	Checked	(that is, default destination for filestream files ??verify??)
										All others default
									
									tab: "Files" -> section: "Database files"
										button: "Add"
											Logical Name:			ImagesDb
											File Type:				FILESTREAM
											Filegroup:				IMAGES (create just a moment ago)
											Initial Size (MB)		<default>
											Autogrowth / Maxsize:	<default>
											Path:					<default>
											File Name:				<default>
										
										??necessary??
											column: "Filename"
												Name all files.
												HistoryProjectOfflineDb.mdf
												HistoryProjectOfflineLogs.ldf
												HistoryProjectOfflineImages.ndf	// "ndf" == "Not master Database File"
									
									button: "OK"
									
									Error:
										Could not process the operation. Always On Availability Groups replica manager is disabled on this instance of SQL Server. Enable Always On Availability Groups, by using the SQL Server Configuration Manager. Then, restart the SQL Server service, and retry the current operation.
										
										SQL Server Configuration Manager -> SQL Server Services -> SQL Server (SQLEXPRESS) -> right-click -> Properties -> tab: "Always On Availability Groups"
											"Always On Availability Groups is unavailable in this edition of SQL Server or Windows."
											
											Well. Crap. Guess it's just a regular database with varbinary(max).
				


			Create SQL server + SQL database in Azure:
				??and connect with SQL Server Management Studio (SSMS).??
				
				Josh Baugher guided me through.
				Azure portal -> Create resource -> "Azure SQL" -> "How do you plan to use the service?" -> SQL databases -> Resource type: Single database -> Create
					Basics:
						Resource group: 
							HistoryProject-RG
						Database name:
							HistoryProjectSqlDb
						Server:
							Create new
								Server name: "historyproject" (.database.windows.net automatically appended)
								Location: (US) East US
									Note: East US was the default for me. It may have chosen this based on IP geolocation.
								Authentication method:
									Use both SQL and Azure AD authentication
										Set Azure AD admin
										Note: Cannot select my @hotmail.com self (Josh was confused by this), so we had me select "coxjohn-cluster" (whatever that is)
									Server admin login
										historyprojectadmin
									Password
										<not stored here; check HistoryProjectKV -> Secrets -> SQLServerAdmin
								
								All other options default.
								
								-> Apply
						Want to use SQL elastic pool?: 
							No
							(default)
						Workload environment:
							Development
						Compute + storage -> Configure database
							Service tier: 
								General Purpose
								(default)
							Compute tier: 
								Serverless
								Note: That is, share a big VM with many others. Performance is less than having a dedicated, on-demand server, but it is much cheaper, and this is useful for dev work.
							Hardware Configuration: 
								Gen5
								(default)
							Max vCores: 
								2
								(default)
							Min vCores: 
								1
								(default)
							Auto-pause delay: 
								Enable auto-pause: 
									<checked>
									(default)
								Days: 
									0
									(default)
								Hours: 
									1
									(default)
								Minutes: 
									0
									(default)
							Data max size (GB): 
								50
							Would you like to make this database zone redundant?: 
								No
							
							-> Apply
							
						Backup storage redundancy: 
							Locally-redundant backup storage
					Networking:
						Allow Azure services and resources to access this server: 
							Yes
						Add current client IP address: 
							Yes
						Connection policy: 
							Default
							Note: Literally called "Default".
					Security:
						Enable Microsoft Defender for SQL: 
							No
							(default)
						Ledger -> Configure ledger:
							Ledger:
								Enable for all future tables in this database: 
									<checked>
							Digest storage:
								Enable automatic digest storage: 
									<not checked>
									(default)
					Additional settings:
						Use existing data: 
							None
							(default)
						Collation:
							SQL_Latin1_General_CP1_CI_AS
							(default)
						Maintenance window: 
							System default (5pm - 8am)
							(default)

					-> Review + create
				
				Wait for resource creation to complete.
				
				Open resource "HistoryProjectSQL-DB (historyproject/HistoryProjectSQL-DB)" -> Overview
					Copy "Server name"
						historyproject.database.windows.net
				
				Open SQL Server Management Studio (SSMS)
					At login, use the "server name" copied ealier.
					Sign in with username and password used in "Authentication method" during the SQL database creation
						historyprojectadmin
						<password>
		
		Test conn string:
			PowerShell (7):
				$conn = New-Object System.Data.SqlClient.SqlConnection
				$conn.ConnectionString = "Server=192.168.1.101;Database=HistoryProjectOfflineDb;User Id=test;Password=TestTest"
				$conn.Open()
				$conn.ServerVersion
					16.00.1115
				$conn.Close()
		
		Update database:
			Program.cs
				Must be set up to connect to the database on "app.run".
				If it doesn't, then EF Core won't be able to update the database either.
				
			Visual Studio -> View -> Other Windows -> Package Manager Console
				Add-Migration MigrationBaseName
				Update-Database
	
	Create Web App
		Azure portal -> Create resource -> "Web App" 
			Resource Group: 
				HistoryProject-RG
			Name: 
				historyproject-webapp-eastus
			Publish:
				Code
			Runtime stack:
				.NET 6 (LTS)
			Operating System:
				Window
				(default if .NET 6 (LTS) is selected as the runtime stack)
			Region:
				East US
			App Service Plan:
				(New) ASP-HistoryProjectRG-<4-character random hexidecimal>
				(auto-created)
			Sku and size:
				Dev/Test -> Recommended pricing tiers -> B1
				Note: This is $32.12/m, but we need SSL for this certificate stuff and this is the cheapest pricing tier for a web app that supports it.
			
			Everything else default
			
			-> Review + create
	
	Create app registration
		??what does this do? it didn't even reference my "web app" VM that I just finished creating, so is this really an application??
		
		Azure portal -> Azure Active Directory (AAD) -> App registrations -> New registration:
			Name:
				HistoryProjectWebApp
			Supported account types:
				"Who can use this application or access this API?"
					"Accounts in this organizational directory only (Default Directory only - Single tenant)"
					(default)
			Redirect URI (optional):
				<blank>
				(default)
			
			-> Register
			
		Automatically taken to the service principle when complete.
			Application (client) ID:
				7bd8caf8-bef5-41fd-822a-6fe1e80ebf89
			Object ID:
				410edc80-b958-483f-b27e-ef12b82a4e40
	
	Create Key Vault:
		Azure portal -> Create resource -> "Key Vault"
			Resource Group:
				HistoryProject-RG
			Name:
				HistoryProjectKV
			Location:
				East US
			
			Everything else default
			Note: This includes the access policy, which defaults to only putting the current user on the policy.
			
			-> Review + create
	
	Add password to kv:
		Azure portal -> HistoryProjectKV -> Secrets -> Generate/Import
			Upload options:
				Manual
				(default)
			Name:
				SQLServerAdmin
			Secret value:
				<password from SQL server setup>
			Content type (optional):
				historyprojectadmin
			
			Everything else default
			
			-> Create

	Add conn string to kv:
		Azure portal -> HistoryProjectKV -> Secrets -> Generate/Import
			Upload options:
				Manual
				(default)
			Name:
				HistoryProject-DB-ConnStr
			Secret value:
				<conn str including SQL server admin username and password>
			Content type (optional)
			
			Everything else default
			
			-> Create
	
	Generate certificate (manually)
		Open Ubuntu (Windows subsystem for Linux)
			If not installed:
				Open PowerShell
				wsl --install
				Restart once done
			
			Create cert dir:
				cd /mnt/c/Users/<username>
				mkdir .certs
				cd .cert
			
			Create private + public keys:
				openssl req -newkey rsa:2048 -nodes -keyout historyProjectPrivateKey.pem -x509 -days 365 -out historyProjectPublicKey.pem
					When prompted for the follow, hit Enter to accept default _except_ for "Common Name".
					Also Note: The "Common Name" is needed (??for what? for the cert to work??), but since this is a self-signed certificate and we don't need to ask a certificate authority to for whether the cert's Common Name is a known value, we can put anything we want.
						Country Name (2 letter code) [AU]:
						State or Province Name (full name) [Some-State]:
						Locality Name (eg, city) []:
						Organization Name (eg, company) [Internet Widgits Pty Ltd]:
						Organizational Unit Name (eg, section) []:
						Common Name (e.g. server FQDN or YOUR name) []:derblarglewhatever
						Email Address []:
				
					Should now have two files in C:\Users\<username>\.certs:
						historyProjectPrivateKey.pem
						historyProjectPublicKey.pem
			
			Combine into a single certificate:
				??why is he doing this??
				Note: Combining both into a single file (standard extension: .pfx) is necessary if you plan to export the authorization to sign certificates to a new certificate authority that is on a separate network. The private key is necessary to digitally sign new certs.
				
				"PFX files are digital certificates that contain both the public and private key needed to establish an SSL/TLS connection."
				Source:
					https://www.howtouselinux.com/post/pfx-file-with-examples
			
				openssl pkcs12 -inkey historyProjectPrivateKey.pem -in historyProjectPublicKey.pem -export -out historyProjectCert.pfx
					Password:
						FabulousAllAround1!
		
	Install cert on local PC:
		Right-click .pfx file -> Install
		Password:
			<blank>
			Note: It seems that the password here is not the same as the one set when running openssl pkcs12`.

	??ignore??
	//Generate certificate (in key vault):
	//	Create CA (if you don't already have one):
	//		Azure portal -> HistoryProjectKV -> Certificates -> Certificate Authorities -> Add
	//			Name:
	//				<enter a name>
	//				Ex: "MyFirstCA"
	//			Provider:
	//				DigiCert
	//			Account ID:
	//				<digicert username>
	//			Account Password:
	//				<digicert password>
	//			Organization ID:
	//				Microsoft
	//				(organization name that I used on account creation)
	//	
	//	Create cert:
	//		Azure portal -> HistoryProjectKV -> Certificates -> Generate/Import
	//			Method of Certificate Creation:
	//				Generate
	//			CertificateName:
	//				HistoryProjectAppRegistrationCert
	//			Type of Certificate Authority (CA):
	//				Certificate issued by an integrated CA
	//			Certificate Authority (CA) -> "not configured" (link)
	//				<select CA created earlier>
	
	Upload the certificate to the key vault:
		Note: Do this so that you can download it to another PC and install it there when you need to use that one.
		Also Note: After entering the password during upload, the .pfx file password does not need to be entered again when downloading to and installing on another PC.
		
		Azure portal -> HistoryProjectKV -> Certificates -> Generate/Import
			Method of Certificate Creation:
				Import
			Certificate Name:
				HistoryProjectServicePrincipleCert
			Upload Certificate File:
				<browse for .pfx file>
			Password:
				<pfx password, created when running `openssl pkcs12`>
			
			-> Create
				
	Upload certificate to the app registration:
		Azure portal -> AAD -> App registrations -> HistoryProjectWebApp -> Certificates & secrets -> Certificates -> Upload certificate
			Upload:
				<browse for public .pem>
			Description:
				"Public key (pem)"
			
			-> Add
	
	Give the app's service principle permission to get secrets from the key vault:
		Azure portal -> HistoryProjectKV -> Access policies -> Create
			Permissions:
				Secret permissions:
					Get
					List
			Principal:
				HistoryProjectWebApp
			Application (optional):
				"NA. An application was already selected as the prinicple."
				(default; unchangeable)
		
		-> Review + create
	
	Create backend WebAPI:
		Create solution:
			VS 2022 -> Create new project -> ASP.NET Core Web API
				Project name:
					WebAPI
				Location:
					<in HistoryProject folder, and so I don't think that the solution needs to be named "HistoryProject">
				Solution name:
					<same as project>
				Place solution and project in the same directory:
					<unchecked>
					(default)
				
				-> Next
				
				Everything else default
				Note: Currently (9/20/2022), defaults to .NET 6.0 (Long-term support (LTS))
				
				-> Create
		
		Add extensions:
			<solution> -> WebAPI (the project) -> Dependencies (right-click) -> Manage NuGet Packages -> Browse -> <select package> -> Install
				Azure.Identity
					Needed for:
						ClientCertificateCredential
					
				Azure.Security.KeyVault.Secrets
					Needed for:
						SecretClient
				
				Microsoft.EntityFrameworkCore
					Needed for:
						builder.Services.AddDbContext
						Basics of everything with EF.
				
				Microsoft.EntityFrameworkCore.Tools
					Needed for:
						Package Manager Console commands (Get-Migration, Add-Migration, etc.)
				
				Microsoft.EntityFrameworkCore.SqlServer
					Needed for:
						options.UseSqlServer
				
				Swashbuckle.AspNetCore
					Needed for:
						Additional tools for working with models when developing the ASP.NET Core backend.
			
		Add access values to appsettings.json:
			"KeyVaultAccess": {
				"TenantId": "4ae6a2f0-4b52-495f-9829-d7a93eaaf17e",
				"AppId": "7bd8caf8-bef5-41fd-822a-6fe1e80ebf89",
				"VaultUrl": "https://historyprojectkv.vault.azure.net/",
				"SecretName": "HistoryProject-DB-ConnStr"
			},
		
		Add DbContext class:
			Right-click WebAPI project -> Add -> New Folder -> "Models"
			Add new class to Models folder.
				using Microsoft.EntityFrameworkCore;

				namespace WebAPI.Models
				{
					public class HistoryProjectDbContext : DbContext
					{
						public HistoryProjectDbContext(DbContextOptions<HistoryProjectDbContext> options) : base(options)
						{

						}

						//public DbSet<MyTable> MyTable { get; set; }
					}
				}
		
		Get conn string from key vault and connect to database during startup.
			Program.cs:
				(already present, first line of file)
				var builder = WebApplication.CreateBuilder(args);
				
				(add)
				var vaultUri = builder.Configuration.GetValue<String>("KeyVaultAccess:VaultUrl");
				var appId = builder.Configuration.GetValue<String>("KeyVaultAccess:AppId");
				var tenantId = builder.Configuration.GetValue<String>("KeyVaultAccess:TenantId");

				var certStore = new X509Store(StoreLocation.CurrentUser);
				certStore.Open(OpenFlags.ReadOnly);
				var certsByName = certStore.Certificates.Find(X509FindType.FindBySubjectName, "derblarglewhatever", false);
				if (certsByName.Count == 0)
				{
					throw new Exception("no certificate available");
				}

				var cert = certsByName.First();

				var loginCredential = new ClientCertificateCredential(tenantId, appId, cert);
				var client = new SecretClient(new Uri(vaultUri), loginCredential);
				var secretName = "HistoryProject-DB-ConnStr";
				var response = await client.GetSecretAsync(secretName);
				var rawResponse = response.GetRawResponse();
				if (rawResponse.Status != 200)
				{
					throw new Exception($"Could not get secret '{secretName}' from key vault. Response code: '{rawResponse.Status}', reason: '{rawResponse.ReasonPhrase}'");
				}

				var keyVaultSecret = response.Value;
				var dbConnStr = keyVaultSecret.Value;
			
			


HistoryProjectAppRegistrationCert2ndAttempt


	
		
	Open WebAPI.sln in VS and connect to DB:
		
				
		Open <project root>/WebAPI/appsettings.json.
		Add:
			"ConnectionStrings": {
				"appConnStr": "<conn str>"
				},
				Note: The conn string is found in the Azure portal -> <sql server> -> <database> -> Settings -> ADO.NET (SQL authentication).
				Also Note: The "{password}" needs to be replaced with your admin password. This password was set up once during the SQL Server creation and was not written down anywhere. It is up to the user to write it down and fill it in here.
					TODO: put into a key vault.
		
		??stuff about setting up connection for Entity Framework so that I can use the Package Manager Console??
	
	In root directory, open a terminal and run these:
		Create project:
			npx create-react-app npmfrontend
		
		On future machines:
			cd <project root>\npmfrontend
			npm install
			npm install --save react-router-dom
			npm install --save react-bootstrap 
	
Quick start:
	Note: WebAPI executable _must_ be running in order for the WebAPI requests that are associated with a database to work.

	In VS:
		Open <solution root>\WebAPI\WebAPI.sln
		run
	
	In VS Code:
		Open console
		cd <solution root>\npmfrontend\
		npm start

	In browser:
		Note: Should be opened automatically in your default browser after successfully running "npm start". If you close that tab though, use this:
			http://localhost:3000/home

TODO:
	https://www.youtube.com/results?search_query=how+to+host+a+page+on+github
	
	How to Host a Website On Github
	https://www.youtube.com/watch?v=8hrJ4oN1u_8
	
	Three.js tutorial ($100)
	https://threejs-journey.com/#

npm audit fix --force
Windows Start menu -> Run -> "certmgr.msc"
	Opens the cert manager for the current user

9/22/2022
	npm install --save sass
		??for modal styles??

12/27/2022
	npm install --save react-bootstrap 

5/4/2024
	Installing SQL Server + SQL Server Management Studio
		https://www.sqlservertutorial.net/getting-started/install-sql-server/

	??but which computers should I run them on??

